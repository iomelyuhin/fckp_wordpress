"use strict";!function(){var t,e=[],r=document.querySelectorAll("[data-da]"),n=[],a=[];if(r.length>0){for(var i=0,o=0;o<r.length;o++){var d=r[o],l=d.getAttribute("data-da");if(""!==l){var c=l.split(","),s=c[1]?c[1].trim():"last",u=c[2]?c[2].trim():"767",p=document.querySelector("."+c[0].trim());c.length>0&&p&&(d.setAttribute("data-da-index",i),e[i]={parent:d.parentNode,index:g(d)},n[i]={element:d,destination:document.querySelector("."+c[0].trim()),place:s,breakpoint:u},i++)}}(t=n).sort((function(t,e){return t.breakpoint>e.breakpoint?-1:1})),t.sort((function(t,e){return t.place>e.place?1:-1}));for(var f=0;f<n.length;f++){var h=n[f].breakpoint;a.push(window.matchMedia("(max-width: "+h+"px)")),a[f].addListener(m)}}function m(){for(var t=0;t<n.length;t++){var e=n[t],r=e.element,i=e.destination,o=e.place,d="_dynamic_adapt_"+e.breakpoint;if(a[t].matches){if(!r.classList.contains(d)){var l=b(i)[o];"first"===o?l=b(i)[0]:"last"===o&&(l=b(i)[b(i).length]),i.insertBefore(r,i.children[l]),r.classList.add(d)}}else r.classList.contains(d)&&(v(r),r.classList.remove(d))}}function v(t){var r=t.getAttribute("data-da-index"),n=e[r],a=n.parent,i=n.index,o=b(a,!0)[i];a.insertBefore(t,a.children[o])}function g(t){return Array.prototype.slice.call(t.parentNode.children).indexOf(t)}function b(t,e){for(var r=t.children,n=[],a=0;a<r.length;a++){var i=r[a];(e||null==i.getAttribute("data-da"))&&n.push(a)}return n}m()}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
